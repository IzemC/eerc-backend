@using ENOC.Dashboard.Components.Layout
@using ENOC.Dashboard.Models
@page "/tanks-management"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject TankApiService TankApi
@inject LookupApiService LookupApi

<PageTitle>Manage Tanks</PageTitle>

<HeaderNav Title="Manage Tanks" />

<div class="page-container">
    <div class="add-user-button-container">
        <button class="btn custom-button" @onclick="ShowAddModal">Add Tank</button>
    </div>

    <div class="user-management-container">
        <div class="search-container">
            <div class="search-box">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M11 19C15.4183 19 19 15.4183 19 11C19 6.58172 15.4183 3 11 3C6.58172 3 3 6.58172 3 11C3 15.4183 6.58172 19 11 19Z" stroke="#D5D2D2" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M20.9999 21L16.6499 16.65" stroke="#D5D2D2" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <input type="text" class="form-control" placeholder="Search" @bind="searchTerm" @oninput="OnSearch" />
            </div>
        </div>
        
        <div class="table-responsive">
            <table class="user-table">
                <thead>
                    <tr>
                        @foreach (var column in tableColumns)
                        {
                            <th>@column.DisplayName</th>
                        }
                        <th class="text-center">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (currentPageTanks.Any())
                    {
                        @foreach (var tank in currentPageTanks)
                        {
                            <tr>
                                <td>@tank.TankNumber</td>
                                <td><span class="@GetBusinessUnitBadgeClass(tank.BusinessUnit)">@tank.BusinessUnit</span></td>
                                <td>@tank.Location</td>
                                <td class="action-buttons text-center">
                                    <div class="dropdown">
                                        <button class="btn button-more" @onclick="() => ToggleActionMenu(tank.Id)">
                                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M12 13C12.5523 13 13 12.5523 13 12C13 11.4477 12.5523 11 12 11C11.4477 11 11 11.4477 11 12C11 12.5523 11.4477 13 12 13Z" stroke="#B9B9B9" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                                <path d="M19 13C19.5523 13 20 12.5523 20 12C20 11.4477 19.5523 11 19 11C18.4477 11 18 11.4477 18 12C18 12.5523 18.4477 13 19 13Z" stroke="#B9B9B9" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                                <path d="M5 13C5.55228 13 6 12.5523 6 12C6 11.4477 5.55228 11 5 11C4.44772 11 4 11.4477 4 12C4 12.5523 4.44772 13 5 13Z" stroke="#B9B9B9" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                            </svg>
                                        </button>
                                        @if (activeActionMenu == tank.Id)
                                        {
                                            <div class="action-menu show">
                                                <button class="action-item" @onclick="() => EditTank(tank)">Edit</button>
                                                <button class="action-item delete" @onclick="() => DeleteTank(tank.Id)">Delete</button>
                                            </div>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4" class="text-center">No tanks found</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
        <nav class="pagination-container">
            <ul class="pagination">
                <li class="page-button @(currentPage == 1 ? "disabled" : "")" @onclick="GoToPreviousPage">
                    <div>
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M19 12H5" stroke="white" stroke-opacity="0.6" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M12 19L5 12L12 5" stroke="white" stroke-opacity="0.6" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </div>
                </li>
                
                @for (int i = 1; i <= totalPages; i++)
                {
                    if (i <= 3 || i > totalPages - 2 || Math.Abs(i - currentPage) <= 1)
                    {
                        <li class="page-item @(i == currentPage ? "active" : "")" @onclick="() => GoToPage(i)">
                            <div>@i</div>
                        </li>
                    }
                    else if (i == 4 && currentPage < totalPages - 2)
                    {
                        <li class="page-item"><div>...</div></li>
                    }
                }
                
                <li class="page-button @(currentPage == totalPages ? "disabled" : "")" @onclick="GoToNextPage">
                    <div>
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M5 12H19" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M12 5L19 12L12 19" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </div>
                </li>
            </ul>
        </nav>
    </div>
</div>

<FooterNav/>

@if (showModal)
{
    <div class="modal-backdrop show" style="background-color: #0C2340;" @onclick="CloseModal"></div>
    <div class="modal show" style="display: block;" tabindex="-1">
        <div class="modal-dialog" style="max-width: 490px;">
            <div class="modal-content" style="background-color: #0C2340;">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Edit Tank" : "Add Tank")</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body" style="padding: 0;">
                    <div class="form-group search-box">
                        <input type="number" class="form-control" placeholder="Tank Number" @bind="currentTank.TankNumber" />
                    </div>
                    <div class="form-group search-box">
                        <select class="form-control" @bind="currentTank.BusinessUnit">
                            <option value="">Select Business Unit</option>
                            <option value="EPCL">EPCL</option>
                            <option value="DUGAS">DUGAS</option>
                        </select>
                    </div>
                    <div class="form-group search-box">
                        <div class="location-inputs">
                            <input type="text" class="form-control" placeholder="Latitude" @bind="latitude" />
                            <span class="coordinate-separator">-</span>
                            <input type="text" class="form-control" placeholder="Longitude" @bind="longitude" />
                        </div>
                    </div>
                    <div class="form-group search-box">
                        <input type="file" class="form-control" @onchange="async (e) => HandleFileUpload(e)" multiple />
                    </div>
                    <div class="form-group search-box">
                        <textarea class="form-control erg-textarea" placeholder="ERG" @bind="currentTank.ERG"></textarea>
                    </div>
                </div>
                <div class="modal-footer" style="justify-content: center;">
                    <button type="button" class="btn custom-button" @onclick="SaveTank">@(isEditing ? "Update" : "Add")</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Tank> tanks = new();
    private List<Tank> filteredTanks = new();
    private List<Tank> currentPageTanks = new();
    private List<BusinessUnit> businessUnits = new();
    private Tank currentTank = new();
    private string searchTerm = string.Empty;
    private bool showModal = false;
    private bool isEditing = false;
    private int activeActionMenu = 0;
    private int currentPage = 1;
    private int pageSize = 4;
    private int totalPages = 1;
    private string latitude = string.Empty;
    private string longitude = string.Empty;

    private List<TableColumn> tableColumns = new()
    {
        new TableColumn { DisplayName = "Tank Number", PropertyName = "TankNumber" },
        new TableColumn { DisplayName = "Business Unit", PropertyName = "BusinessUnit" },
        new TableColumn { DisplayName = "Location", PropertyName = "Location" }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadTanksAsync();
        await LoadBusinessUnitsAsync();
        ApplyFiltering();
    }

    private async Task LoadTanksAsync()
    {
        var tanksFromApi = await TankApi.GetAllTanksAsync();
        if (tanksFromApi != null)
        {
            tanks = tanksFromApi.Select(t => new Tank
            {
                Id = (int)t.Id.GetHashCode(), // Convert Guid to int for compatibility
                TankNumber = t.TankNumber,
                BusinessUnit = t.BusinessUnit,
                Location = t.Location ?? "",
                ERG = t.ERG ?? "",
                TankId = t.Id // Store actual Guid for API calls
            }).ToList();
        }
    }

    private async Task LoadBusinessUnitsAsync()
    {
        businessUnits = (await LookupApi.GetBusinessUnitsAsync())?.ToList() ?? new List<BusinessUnit>();
    }

    private void ApplyFiltering()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredTanks = tanks;
        }
        else
        {
            filteredTanks = tanks.Where(t =>
                t.TankNumber.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                t.BusinessUnit.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                t.Location.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                t.ERG.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
        currentPage = 1;
        UpdatePagination();
    }

    private void UpdatePagination()
    {
        totalPages = (int)Math.Ceiling((double)filteredTanks.Count / pageSize);
        currentPageTanks = filteredTanks.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void OnSearch(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFiltering();
    }

    private void ShowAddModal()
    {
        currentTank = new Tank();
        latitude = string.Empty;
        longitude = string.Empty;
        isEditing = false;
        showModal = true;
        StateHasChanged();
    }

    private void EditTank(Tank tank)
    {
        currentTank = new Tank
        {
            Id = tank.Id,
            TankNumber = tank.TankNumber,
            BusinessUnit = tank.BusinessUnit,
            Location = tank.Location,
            ERG = tank.ERG
        };
        
        // Parse existing location for latitude and longitude
        var locationParts = tank.Location.Split(" - ");
        if (locationParts.Length == 2)
        {
            latitude = locationParts[0];
            longitude = locationParts[1];
        }
        
        isEditing = true;
        showModal = true;
        activeActionMenu = 0;
        StateHasChanged();
    }

    private async Task DeleteTank(int tankId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this tank?"))
        {
            tanks.RemoveAll(t => t.Id == tankId);
            ApplyFiltering();
            StateHasChanged();
        }
        activeActionMenu = 0;
    }

    private void SaveTank()
    {
        // Combine latitude and longitude for location
        if (!string.IsNullOrEmpty(latitude) && !string.IsNullOrEmpty(longitude))
        {
            currentTank.Location = $"{latitude} - {longitude}";
        }

        if (isEditing)
        {
            var existingTank = tanks.FirstOrDefault(t => t.Id == currentTank.Id);
            if (existingTank != null)
            {
                existingTank.TankNumber = currentTank.TankNumber;
                existingTank.BusinessUnit = currentTank.BusinessUnit;
                existingTank.Location = currentTank.Location;
                existingTank.ERG = currentTank.ERG;
            }
        }
        else
        {
            currentTank.Id = tanks.Count > 0 ? tanks.Max(t => t.Id) + 1 : 1;
            tanks.Add(currentTank);
        }
        
        ApplyFiltering();
        CloseModal();
    }

    private void CloseModal()
    {
        showModal = false;
        StateHasChanged();
    }

    private void ToggleActionMenu(int tankId)
    {
        activeActionMenu = activeActionMenu == tankId ? 0 : tankId;
        StateHasChanged();
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            UpdatePagination();
            StateHasChanged();
        }
    }

    private void GoToPreviousPage()
    {
        if (currentPage > 1) GoToPage(currentPage - 1);
    }

    private void GoToNextPage()
    {
        if (currentPage < totalPages) GoToPage(currentPage + 1);
    }

    private void HandleFileUpload(ChangeEventArgs e)
    {
        
    }

    private string GetBusinessUnitBadgeClass(string businessUnit)
    {
        return businessUnit.ToLower() switch
        {
            "epcl" => "team-badge badge-management",
            "refinery" => "team-badge badge-operation", 
            "dugas" => "team-badge badge-green",
            "production" => "team-badge badge-green",
            _ => "team-badge badge-default"
        };
    }

    public class Tank
    {
        public int Id { get; set; }
        public int TankNumber { get; set; }
        public string BusinessUnit { get; set; } = string.Empty;
        public string Location { get; set; } = string.Empty;
        public string ERG { get; set; } = string.Empty;
        public Guid TankId { get; set; } // For API calls
    }

    public class TableColumn
    {
        public string DisplayName { get; set; } = string.Empty;
        public string PropertyName { get; set; } = string.Empty;
    }
}