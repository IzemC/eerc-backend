@using ENOC.Dashboard.Components.Layout
@using ENOC.Dashboard.Models
@page "/user-management"

@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject UserApiService UserApi
@inject LookupApiService LookupApi

<PageTitle>Manage users</PageTitle>

<HeaderNav Title="Manage users" />

<div class="page-container">
    <div class="add-user-button-container">
        <button class="btn custom-button" @onclick="ShowAddModal">Add User</button>
    </div>

    <div class="user-management-container">
        <div class="search-container">
            <div class="search-box">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M11 19C15.4183 19 19 15.4183 19 11C19 6.58172 15.4183 3 11 3C6.58172 3 3 6.58172 3 11C3 15.4183 6.58172 19 11 19Z" stroke="#D5D2D2" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M20.9999 21L16.6499 16.65" stroke="#D5D2D2" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <input type="text" class="form-control" placeholder="Search" @bind="searchTerm" @oninput="OnSearch" />
            </div>
        </div>
        
        <div class="table-responsive">
            <table class="user-table">
                <thead>
                    <tr>
                        @foreach (var column in tableColumns)
                        {
                            <th>@column.DisplayName</th>
                        }
                        <th class="text-center">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (currentPageUsers.Any())
                    {
                        @foreach (var user in currentPageUsers)
                        {
                            <tr>
                                <td>@user.FullName</td>
                                <td><span class="@GetTeamBadgeClass(user.Team)">@user.Team</span></td>
                                <td>@user.Position</td>
                                <td>@user.Email</td>
                                <td class="action-buttons text-center">
                                    <div class="dropdown">
                                        <button class="btn button-more" @onclick="() => ToggleActionMenu(user.Id)">
                                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M12 13C12.5523 13 13 12.5523 13 12C13 11.4477 12.5523 11 12 11C11.4477 11 11 11.4477 11 12C11 12.5523 11.4477 13 12 13Z" stroke="#B9B9B9" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                                <path d="M19 13C19.5523 13 20 12.5523 20 12C20 11.4477 19.5523 11 19 11C18.4477 11 18 11.4477 18 12C18 12.5523 18.4477 13 19 13Z" stroke="#B9B9B9" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                                <path d="M5 13C5.55228 13 6 12.5523 6 12C6 11.4477 5.55228 11 5 11C4.44772 11 4 11.4477 4 12C4 12.5523 4.44772 13 5 13Z" stroke="#B9B9B9" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                            </svg>
                                        </button>
                                        @if (activeActionMenu == user.Id)
                                        {
                                            <div class="action-menu show">
                                                <button class="action-item" @onclick="() => EditUser(user)">Edit</button>
                                                <button class="action-item delete" @onclick="() => DeleteUser(user.Id)">Delete</button>
                                            </div>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="text-center">No users found</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
        <nav class="pagination-container">
            <ul class="pagination">
                <li class="page-button @(currentPage == 1 ? "disabled" : "")" @onclick="GoToPreviousPage">
                    <div>
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M19 12H5" stroke="white" stroke-opacity="0.6" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M12 19L5 12L12 5" stroke="white" stroke-opacity="0.6" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </div>
                </li>
                
                @for (int i = 1; i <= totalPages; i++)
                {
                    if (i <= 3 || i > totalPages - 2 || Math.Abs(i - currentPage) <= 1)
                    {
                        <li class="page-item @(i == currentPage ? "active" : "")" @onclick="() => GoToPage(i)">
                            <div>@i</div>
                        </li>
                    }
                    else if (i == 4 && currentPage < totalPages - 2)
                    {
                        <li class="page-item"><div>...</div></li>
                    }
                }
                
                <li class="page-button @(currentPage == totalPages ? "disabled" : "")" @onclick="GoToNextPage">
                    <div>
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M5 12H19" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M12 5L19 12L12 19" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </div>
                </li>
            </ul>
        </nav>
    </div>
</div>

<FooterNav/>

@if (showModal)
{
    <div class="modal-backdrop show" style="background-color: #0C2340;" @onclick="CloseModal"></div>
    <div class="modal show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content" style="background-color: #0C2340;">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Edit User" : "Add User")</h5>
               
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseModal"></button>
     
                </div>
                <div class="modal-body">
                    <div class="form-group search-box">
                        <input type="text" class="form-control" placeholder="Full Name" @bind="currentUser.FullName" />
                    </div>
                    <div class="form-group search-box">
                        <input type="email" class="form-control" placeholder="Email" @bind="currentUser.Email" />
                    </div>
                    <div class="form-group search-box">
                        <input type="text" class="form-control" placeholder="Employee ID" @bind="currentUser.EmployeeId" />
                    </div>
                    <div class="form-group search-box">
                        <select class="form-control" @bind="selectedTeamId">
                            <option value="">Select Team (Optional)</option>
                            @foreach (var team in teams)
                            {
                                <option value="@team.Id">@team.Name</option>
                            }
                        </select>
                    </div>
                    <div class="form-group search-box">
                        <select class="form-control" @bind="selectedPositionId">
                            <option value="">Select Position (Optional)</option>
                            @foreach (var position in positions)
                            {
                                <option value="@position.Id">@position.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn custom-button" @onclick="SaveUser">@(isEditing ? "Update" : "Send Invitation")</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<User> users = new();
    private List<User> filteredUsers = new();
    private List<User> currentPageUsers = new();
    private List<Team> teams = new();
    private List<EercPosition> positions = new();
    private User currentUser = new();
    private string searchTerm = string.Empty;
    private bool showModal = false;
    private bool isEditing = false;
    private int activeActionMenu = 0;
    private int currentPage = 1;
    private int pageSize = 4;
    private int totalPages = 1;
    private string selectedTeamId = "";
    private string selectedPositionId = "";
    private string currentUserEmployeeId = "";

    private List<TableColumn> tableColumns = new()
    {
        new TableColumn { DisplayName = "Full name", PropertyName = "FullName" },
        new TableColumn { DisplayName = "Team", PropertyName = "Team" },
        new TableColumn { DisplayName = "Position", PropertyName = "Position" },
        new TableColumn { DisplayName = "Email", PropertyName = "Email" }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
        await LoadLookupsAsync();
        ApplyFiltering();
    }

    private async Task LoadUsersAsync()
    {
        var usersFromApi = await UserApi.GetAllUsersAsync();
        if (usersFromApi != null)
        {
            users = usersFromApi.Select(u => new User
            {
                Id = (int)u.Id.GetHashCode(), // Convert Guid to int for compatibility
                FullName = u.FullName,
                Team = GetTeamDisplay(u.Roles, u.TeamName),
                Position = GetPositionDisplay(u.Roles, u.TeamName, u.PositionName),
                Email = u.Email,
                EmployeeId = u.EmployeeId,
                TeamId = u.TeamId ?? Guid.Empty,
                PositionId = u.PositionId ?? Guid.Empty,
                UserGuid = u.Id // Store actual Guid for API calls
            }).ToList();
        }
    }

    private async Task LoadLookupsAsync()
    {
        teams = (await LookupApi.GetTeamsAsync())?.ToList() ?? new List<Team>();
        positions = (await LookupApi.GetEercPositionsAsync())?.ToList() ?? new List<EercPosition>();
    }

    private string GetTeamDisplay(List<string> roles, string? teamName)
    {
        // If user has Management role, team is always "Management"
        if (roles.Contains("Management", StringComparer.OrdinalIgnoreCase))
        {
            return "Management";
        }

        // If user has EERC role, show their color team
        if (roles.Contains("EERC", StringComparer.OrdinalIgnoreCase))
        {
            return teamName ?? "Unassigned";
        }

        // Default
        return teamName ?? "Unassigned";
    }

    private string GetPositionDisplay(List<string> roles, string? teamName, string? positionName)
    {
        // If user has Management role, position is always "Management"
        if (roles.Contains("Management", StringComparer.OrdinalIgnoreCase))
        {
            return "Management";
        }

        // If user has EERC role with a color team, show team name in position column
        if (roles.Contains("EERC", StringComparer.OrdinalIgnoreCase))
        {
            var colorTeams = new[] { "White", "Black", "Green", "Red" };
            if (!string.IsNullOrEmpty(teamName) && colorTeams.Contains(teamName, StringComparer.OrdinalIgnoreCase))
            {
                return teamName;
            }
        }

        // Default: show position name if available
        return positionName ?? "Unassigned";
    }

    private void ApplyFiltering()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredUsers = users;
        }
        else
        {
            filteredUsers = users.Where(u =>
                u.FullName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                u.Team.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                u.Position.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                u.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
        currentPage = 1;
        UpdatePagination();
    }

    private void UpdatePagination()
    {
        totalPages = (int)Math.Ceiling((double)filteredUsers.Count / pageSize);
        currentPageUsers = filteredUsers.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void OnSearch(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFiltering();
    }

    private void ShowAddModal()
    {
        currentUser = new User();
        selectedTeamId = "";
        selectedPositionId = "";
        currentUserEmployeeId = "";
        isEditing = false;
        showModal = true;
        StateHasChanged();
    }

    private void EditUser(User user)
    {
        currentUser = new User
        {
            Id = user.Id,
            FullName = user.FullName,
            Team = user.Team,
            Position = user.Position,
            Email = user.Email,
            TeamId = user.TeamId,
            PositionId = user.PositionId,
            EmployeeId = user.EmployeeId
        };
        selectedTeamId = user.TeamId != Guid.Empty ? user.TeamId.ToString() : "";
        selectedPositionId = user.PositionId != Guid.Empty ? user.PositionId.ToString() : "";
        currentUserEmployeeId = user.EmployeeId;
        isEditing = true;
        showModal = true;
        activeActionMenu = 0;
        StateHasChanged();
    }

    private async Task DeleteUser(int userId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?"))
        {
            var user = users.FirstOrDefault(u => u.Id == userId);
            if (user != null)
            {
                var success = await UserApi.DeleteUserAsync(user.UserGuid);
                if (success)
                {
                    await LoadUsersAsync();
                    ApplyFiltering();
                    StateHasChanged();
                }
            }
        }
        activeActionMenu = 0;
    }

    private async Task SaveUser()
    {
        Guid? teamId = string.IsNullOrEmpty(selectedTeamId) ? null : Guid.Parse(selectedTeamId);
        Guid? positionId = string.IsNullOrEmpty(selectedPositionId) ? null : Guid.Parse(selectedPositionId);

        if (isEditing)
        {
            var request = new UpdateUserRequest
            {
                FullName = currentUser.FullName,
                Email = currentUser.Email,
                TeamId = teamId,
                PositionId = positionId,
                EmployeeId = currentUser.EmployeeId
            };

            var result = await UserApi.UpdateUserAsync(currentUser.UserGuid, request);
            if (result != null)
            {
                await LoadUsersAsync();
                ApplyFiltering();
            }
        }
        else
        {
            var request = new CreateUserRequest
            {
                FullName = currentUser.FullName,
                Email = currentUser.Email,
                TeamId = teamId,
                PositionId = positionId,
                EmployeeId = currentUser.EmployeeId
            };

            var result = await UserApi.CreateUserAsync(request);
            if (result != null)
            {
                await LoadUsersAsync();
                ApplyFiltering();
            }
        }

        CloseModal();
    }

    private void CloseModal()
    {
        showModal = false;
        StateHasChanged();
    }

    private void ToggleActionMenu(int userId)
    {
        activeActionMenu = activeActionMenu == userId ? 0 : userId;
        StateHasChanged();
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            UpdatePagination();
            StateHasChanged();
        }
    }

    private void GoToPreviousPage()
    {
        if (currentPage > 1) GoToPage(currentPage - 1);
    }

    private void GoToNextPage()
    {
        if (currentPage < totalPages) GoToPage(currentPage + 1);
    }

    private string GetTeamBadgeClass(string team)
    {
        return team.ToLower() switch
        {
            "management" => "team-badge badge-management",
            "white" => "team-badge badge-default",
            "black" => "team-badge badge-black",
            "green" => "team-badge badge-green",
            "red" => "team-badge badge-operation",
            _ => "team-badge badge-default"
        };
    }

    public class User
    {
        public int Id { get; set; }
        public string FullName { get; set; } = string.Empty;
        public string Team { get; set; } = string.Empty;
        public string Position { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string EmployeeId { get; set; } = string.Empty;
        public Guid TeamId { get; set; } // For API calls
        public Guid PositionId { get; set; } // For API calls
        public Guid UserGuid { get; set; } // Actual Guid from API
    }

    public class TableColumn
    {
        public string DisplayName { get; set; } = string.Empty;
        public string PropertyName { get; set; } = string.Empty;
    }
}