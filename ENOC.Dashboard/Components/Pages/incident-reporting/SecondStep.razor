@rendermode InteractiveServer
@using ENOC.Dashboard.Models
@inject LookupApiService LookupApi

<div>
    <div class="row mb-3 mt-3">
        <div class="col-xl-12 text-center">
            <p class="title">
                Please wait until you get the feedback to know the next action
            </p>
        </div>
    </div>


    @if (Tanks.Count > 0)
    {
        <div class="row mb-5">
            <div class="col-4 offset-4 text-center">
                <div class="form-group">
                    <label class="input-label-font mb-2">
                        Tank number
                        <p class="custom-span" style="font-size: 18px !important; display:inline-block;">(optional)</p>
                    </label>
                    <select class="form-select" id="TankNumber" name="tankId" style="width: 100% !important;"
                            @bind="SelectedTankId">
                        <option value="">Pick a tank</option>
                        @foreach (var option in Tanks)
                        {
                            <option value="@option.Id">@option.Name</option>
                        }
                    </select>
                </div>
            </div>
        </div>
    }

    <div class="buttons">
            <button type="button"
                    class="btn-aqua btn-selection rect-button @(selectedAction == "Notify team" ? "selected" : "")"
                    @onclick="@(() => SelectAction("Notify team"))">
                Notify team
            </button>
            <button type="button"
                    class="btn-aqua btn-selection rect-button @(selectedAction == "Stand down" ? "selected" : "")"
                    @onclick="@(() => SelectAction("Stand down"))">
                Stand down
            </button>
    </div>

    <button type="button"
            id="form-button"
            class="btn btn-secondary btn-aqua rect-button-confirm incident-form-button"
            @onclick="HandleConfirm"
            disabled="@(!CanConfirm)">
        Confirm
    </button>

</div>

@code{
    [Parameter]
    public Func<Task> onConfirm { get; set; }

    [Parameter]
    public IncidentFormState? FormState { get; set; }

    public Guid? SelectedTankId;
    public List<TankModel> Tanks = new();
    private string? selectedAction;

    private bool CanConfirm => !string.IsNullOrEmpty(selectedAction);

    protected override async Task OnInitializedAsync()
    {
        await LoadTanksAsync();

        // Load previous selections if any
        if (FormState != null)
        {
            SelectedTankId = FormState.TankId;
            selectedAction = FormState.Action;
        }
    }

    private async Task LoadTanksAsync()
    {
        var tanks = await LookupApi.GetTanksAsync();
        if (tanks != null && tanks.Any())
        {
            Tanks = tanks.Select(t => new TankModel
            {
                Id = t.Id.ToString(),
                Name = t.Name
            }).ToList();
        }
    }

    private void SelectAction(string action)
    {
        selectedAction = action;
        if (FormState != null)
        {
            FormState.Action = action;
        }
    }

    private async Task HandleConfirm()
    {
        // Save tank selection (if any)
        if (FormState != null && SelectedTankId.HasValue)
        {
            FormState.TankId = SelectedTankId;
            var selectedTank = Tanks.FirstOrDefault(t => Guid.Parse(t.Id) == SelectedTankId);
            FormState.TankName = selectedTank?.Name;
        }

        if (CanConfirm && onConfirm != null)
        {
            await onConfirm();
        }
    }

    public class TankModel{
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
    }
}