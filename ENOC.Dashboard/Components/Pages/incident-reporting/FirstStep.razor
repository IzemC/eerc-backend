@rendermode InteractiveServer
@using ENOC.Dashboard.Models
@inject LookupApiService LookupApi

<form id="form" method="post">
    <div class="row">
        <div class="col-12">
            <h3 class="header-font">Incident type</h3>
        </div>
    </div>

    <div class="d-flex gap-3" id="incidentTypes" style="padding-bottom: 28px;">
        @foreach (var incidentType in @IncidentTypes)
        {
            <div class="col-and-half">
                <a class="incident-type @(selectedIncidentTypeId?.ToString() == incidentType.Id ? "selected" : "")"
                   @onclick="@(() => SelectIncidentType(incidentType.Id, incidentType.Name))">
                    <div class="rect-img" style="background:linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, #000000 100%), url('@incidentType.Image');">
                        <div class="rect-img-blur">
                            <span class="rect-img-font">@incidentType.Name</span>
                        </div>
                    </div>
                </a>
            </div>
        }
    </div>

    <div class="row">
        <div class="col-12">
            <h3 class="header-font">Business Unit</h3>
        </div>
    </div>

    <div class="container-fluid" style="position:relative; padding-bottom: 200px;">
        <div class="d-flex gap-2">
            @foreach (var unit in Units)
            {
                <div class="col-and-half">
                    <button type="button"
                            class="unit btn-selection btn-aqua rect-button @(selectedBusinessUnitId?.ToString() == unit.Id ? "selected" : "")"
                            @onclick="@(() => SelectBusinessUnit(unit.Id, unit.Name))">
                        @unit.Name
                    </button>
                </div>
            }
        </div>
    </div>

    <button type="button"
            id="form-button"
            class="btn btn-secondary btn-aqua rect-button-confirm submit-button incident-form-button"
            @onclick="HandleConfirm"
            disabled="@(!CanConfirm)">
        Confirm
    </button>
</form>

@code {

    [Parameter]
    public Func<Task> onConfirm { get; set; }

    [Parameter]
    public IncidentFormState? FormState { get; set; }

    private List<IncidentTypeModel> IncidentTypes = new();
    private List<UnitModel> Units = new();
    private Guid? selectedIncidentTypeId;
    private Guid? selectedBusinessUnitId;

    private bool CanConfirm => selectedIncidentTypeId.HasValue && selectedBusinessUnitId.HasValue;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();

        // Load previous selections if any
        if (FormState != null)
        {
            selectedIncidentTypeId = FormState.IncidentTypeId;
            selectedBusinessUnitId = FormState.BusinessUnitId;
        }
    }

    private async Task LoadDataAsync()
    {
        var incidentTypes = await LookupApi.GetIncidentTypesAsync();
        if (incidentTypes != null)
        {
            IncidentTypes = incidentTypes.Select(it => new IncidentTypeModel
            {
                Id = it.Id.ToString(),
                Name = it.Name,
                Image = it.Image ?? "/assets/default-incident.png"
            }).ToList();
        }

        var businessUnits = await LookupApi.GetBusinessUnitsAsync();
        if (businessUnits != null)
        {
            Units = businessUnits.Select(bu => new UnitModel
            {
                Id = bu.Id.ToString(),
                Name = bu.Name,
                IsSelected = false
            }).ToList();
        }
    }

    private void SelectIncidentType(string id, string name)
    {
        if (Guid.TryParse(id, out var guid))
        {
            selectedIncidentTypeId = guid;
            if (FormState != null)
            {
                FormState.IncidentTypeId = guid;
                FormState.IncidentTypeName = name;
            }
        }
    }

    private void SelectBusinessUnit(string id, string name)
    {
        if (Guid.TryParse(id, out var guid))
        {
            selectedBusinessUnitId = guid;
            if (FormState != null)
            {
                FormState.BusinessUnitId = guid;
                FormState.BusinessUnitName = name;
            }
        }
    }

    private async Task HandleConfirm()
    {
        if (CanConfirm && onConfirm != null)
        {
            await onConfirm();
        }
    }

    public class UnitModel {
        public string Id { get; set; } = string.Empty;
        public bool IsSelected { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    public class IncidentTypeModel {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Image {get; set;} = string.Empty;
    }
}
    
 